#lang racket
(define (dia-siguiente a)
  (define D (car a))
  (define M (cadr a))
  (define A (caddr a))

  (cond [(and (= M 12) (= D 31))(list 1 1 (+ 1 A))]
        [(and (= D 31)(or (or (or (or (= M 1) (= M 3)) (= M 5)) (= M 8)) (= M 10)))(list 1 (+ M 1) A)]
        [(and (= D 30)(or (or (or (= M 4) (= M 6)) (= M 9))(= M 11)))(list 1 (+ M 1) A)]
        [(and (= D 29)(= M 2))(list 1 3 A)]
        [(and(and (= D 28)(= M 2))(=(modulo A 4) 0))(list 29 2 A)]
        [(and (= D 28)(= M 2))(list 1 3 A)]
        [(< D 30)(list(+ D 1) M A)]
  )
  
)